セキュリティ方式概要設計書

1. はじめに

1.1 本書の目的
本書は、Health Data Bank（HDB）モバイルアプリケーションにおけるセキュリティ要件の実装方式を定義し、アプリケーション層・フレームワーク層・システム層における責任分担を明確化することを目的とする。

1.2 対象範囲
・HDBモバイルアプリケーション（iOS/Android）
・HDB Webサーバーとの通信
・モバイルデバイス内でのデータ保護
・ローカルデータベース（SQLite）保護

1.3 関連文書
・スマホアプリ単体_非機能要求.tsv
・OWASP Mobile Top 10 2024
・iOS Human Interface Guidelines
・Android Security Best Practices

2. セキュリティ要件概要

2.1 基本方針
HDBアプリケーションは、医療・健康データを扱うアプリケーションとして、以下の基本方針に基づいてセキュリティを実装する：

1. 最小権限の原則: 必要最小限の権限のみを要求
2. 多層防御: アプリケーション・フレームワーク・システムの各層で防御
3. 透明性: ユーザーに対してデータの取り扱いを明確に提示
4. 標準準拠: OWASP Mobile Top 10、個人情報保護法、GDPR準拠

2.2 セキュリティ目標
・個人の健康データの機密性・完全性・可用性の確保
・不正アクセスからの保護
・データ漏洩の防止
・プライバシー保護

3. セキュリティ実装方式

3.1 認証・認可

3.1.1 ユーザー認証
要件: 現行HDB認証（ID/パスワード、SSO）準拠、初回ログイン時本人認証（アクティベート）機能

実装層別責任分担:

層｜実装内容｜技術要素
アプリケーション層｜・ログイン画面UI実装　・入力値検証　・セッション管理　・自動ログアウト処理｜React Native　useAuth Hook　AsyncStorage
フレームワーク層｜・認証トークン管理　・セキュアストレージ　・生体認証連携｜Keychain (iOS)　Keystore (Android)　BiometricPrompt
システム層｜・デバイス認証　・暗号化キー管理　・セキュアエンクレーブ｜Touch ID/Face ID　Android Biometric　TEE/Secure Enclave

不正アクセス対策（非機能要求書に基づく）:
1. 一定期間のアクセス制限
2. 一定回数間違えたらメール送信の認証リンクから開かないとログインできない
3. パスワード有効期間の設定による強化
4. パスワード以外の要素での認証

実装詳細:
SecurityPolicy {
  maxLoginAttempts: 5              // ログイン試行回数上限
  lockoutDuration: 30              // ロックアウト期間（分）
  passwordExpiry: 90               // パスワード有効期限（日）
  requireEmailVerification: true   // メール認証必須
  supportBiometric: true           // 生体認証サポート
}

3.1.2 セッション管理
実装方式:
アプリケーション層:
  - JWTトークンベース認証
  - リフレッシュトークン実装
  - 30分の非活動タイムアウト
  
フレームワーク層:
  - トークンのセキュア保存（Keychain/Keystore）
  - 自動リフレッシュ機構

3.2 データ保護

3.2.1 通信データ暗号化
要件: TLS1.3での通信暗号化、証明書ピンニング実装、中間者攻撃対策

実装層別責任分担:

層｜実装内容｜技術要素
アプリケーション層｜・API通信実装　・エラーハンドリング　・リトライ処理｜axios/fetch　エラー処理
フレームワーク層｜・証明書ピンニング　・TLS設定　・通信ライブラリ｜react-native-ssl-pinning　OkHttp (Android)　NSURLSession (iOS)
システム層｜・TLS 1.3プロトコル　・暗号スイート管理　・証明書検証｜OS暗号化ライブラリ　システムCA証明書

証明書ピンニング実装:
公開鍵ピンニング
production: [本番証明書SHA256, バックアップ証明書SHA256]
staging: [ステージング証明書SHA256]

3.2.2 保存データ暗号化
要件: 認証情報・個人情報のAES256暗号化、iOS Keychain・Android Keystore活用

実装層別責任分担:

層｜実装内容｜技術要素
アプリケーション層｜・暗号化対象データ識別　・暗号化/復号化呼び出し　・データ分類管理｜DatabaseService　VitalDataService
フレームワーク層｜・SQLite暗号化　・キーチェーン連携　・暗号化ユーティリティ｜react-native-sqlite-2　react-native-keychain
システム層｜・AES-256暗号化　・ハードウェア暗号化　・キー管理｜iOS Data Protection　Android FBE

データ分類と暗号化レベル:
高機密度データ（AES-256 + Keychain/Keystore）:
  - パスワード、認証トークン、リフレッシュトークン
  - 個人識別情報（氏名、生年月日、電話番号、メールアドレス）
  - 健康データ（バイタルデータ全般）
  - 医療履歴

中機密度データ（AES-256）:
  - アプリ設定情報
  - キャッシュデータ
  - セッション情報

低機密度データ（平文）:
  - UIテーマ設定
  - 言語設定
  - アプリバージョン情報

3.3 データベース保護

3.3.1 SQLite データベース暗号化
実装方式: SQLite組み込み暗号化機能とアプリケーションレベル暗号化の併用

暗号化仕様:
DBEncryptionConfig {
  dbEncryption: {
    enabled: true
    algorithm: 'AES-256'              // 暗号化アルゴリズム
    keyDerivation: 'PBKDF2-HMAC-SHA256' // 鍵導出関数
    iterations: 100000                // PBKDF2イテレーション数
  }
  
  fieldEncryption: {
    enabled: true
    algorithm: 'AES-256-GCM'          // 認証付き暗号
    targetFields: [                   // 暗号化対象フィールド
      'users.email',
      'users.phone_number',
      'users.name',
      'vital_data.value',
      'vital_data.notes'
    ]
  }
}

実装層別責任分担:

層｜実装内容｜技術要素
アプリケーション層｜・DB接続管理　・トランザクション制御　・クエリ実行　・フィールド暗号化｜DatabaseService　SQLite APIs
フレームワーク層｜・DB暗号化ライブラリ　・暗号化キー管理　・自動暗号化/復号化｜react-native-sqlite-2　CryptoJS
システム層｜・暗号化処理　・キーストア連携　・メモリ保護｜Keychain/Keystore　Secure Memory

3.3.2 暗号化キー管理
キー管理階層:
マスターキー（デバイス固有・Keychain/Keystore保存）
  └─ データベース暗号化キー（PBKDF2で導出）
      ├─ テーブル暗号化キー
      └─ フィールド暗号化キー（特定カラム用）

キー生成・保管実装:
DatabaseKeyManager {
  // マスターキー生成（初回インストール時）
  generateMasterKey(): 256bitのセキュアランダムキー生成
  
  // iOS: Keychain保存
  Keychain.setInternetCredentials(
    'com.hdbapp.dbkey',
    'master',
    masterKey,
    accessible: WHEN_UNLOCKED_THIS_DEVICE_ONLY,
    authenticatePrompt: 'HDBアプリのデータ保護キーへのアクセス'
  )
  
  // Android: Keystore保存
  RNKeychain.setInternetCredentials(
    'com.hdbapp.dbkey',
    'master', 
    masterKey,
    accessControl: BIOMETRY_CURRENT_SET,
    accessible: WHEN_UNLOCKED_THIS_DEVICE_ONLY
  )
  
  // データベース暗号化キー導出
  deriveDBKey(userId): PBKDF2-HMAC-SHA256で導出（100,000回反復）
}

3.3.3 データベースアクセス制御
アクセス制御実装:
・ユーザーごとのデータ分離
・ロールベースアクセス制御（RBAC）
・最小権限原則の適用

データベースアクセス権限:
DBPermission {
  READ_OWN_DATA = 'read:own'      // 自分のデータ読み取り
  WRITE_OWN_DATA = 'write:own'    // 自分のデータ書き込み  
  DELETE_OWN_DATA = 'delete:own'  // 自分のデータ削除
  EXPORT_DATA = 'export:data'      // データエクスポート
}

3.3.4 データベースバックアップ暗号化
バックアップ仕様:
BackupConfig {
  encryption: {
    enabled: true
    algorithm: 'AES-256-GCM'     // 認証付き暗号
    keySource: 'user-derived'    // ユーザーパスワード由来
  }
  compression: 'gzip'            // 圧縮形式
  storage: 'local-encrypted'     // 保存先
}

機種変更時のデータ移行（非機能要求書対応）:
DataMigration {
  // iOSデータ移行
  exportForIOS(): iCloud Keychain経由でのキー共有
  
  // Androidデータ移行  
  exportForAndroid(): Google Backupサービス利用
}

3.4 メモリ保護

3.4.1 機密データのメモリ管理
SecureMemoryManager {
  // 機密データの安全な削除
  secureWipe(data): ランダムデータで上書き後、ゼロフィル
  
  // 機密文字列の処理
  processSecureString(sensitive, callback): 処理後即座にメモリクリア
}

3.4.2 SQLiteセキュリティ設定
セキュアなSQLite設定（DatabaseService内で実行）:
PRAGMA secure_delete = ON        // 削除時のデータ完全消去
PRAGMA auto_vacuum = FULL        // 自動VACUUM（削除データの物理削除）
PRAGMA temp_store = MEMORY       // 一時データはメモリのみ使用

3.5 アプリケーションセキュリティ

3.5.1 コードセキュリティ
要件: ESLint・Prettier準拠、TypeScript strict設定、コードレビュー必須化、難読化実装

実装内容:
・コード難読化（ProGuard/R8 for Android、Swift難読化 for iOS）
・デバッグ検出・防止
・改ざん検出

実装層別責任分担:

層｜実装内容｜技術要素
アプリケーション層｜・セキュアコーディング　・入力値検証　・エラー処理｜TypeScript strict mode　ESLint security rules
フレームワーク層｜・コード難読化　・Anti-debugging　・整合性チェック｜ProGuard/R8　react-native-obfuscator
システム層｜・アプリ署名検証　・コード署名　・サンドボックス｜APK署名　iOS Code Signing

3.5.2 ルート化/脱獄検出
要件: ルート化・JB端末での利用制限検討（技術的に難しいため警告表示）

DeviceSecurityChecker {
  checkDeviceSecurity(): {
    isRooted: ルート化検出
    isJailbroken: 脱獄検出
    isDevelopmentBuild: デバッグモード検出
    action: 'WARN' // 警告のみ（ブロックはしない）
  }
  
  警告表示:
  'セキュリティリスクが検出されました。本アプリの利用は推奨されません。'
}

3.6 プライバシー保護

3.6.1 個人情報管理
要件: 個人情報保護法・GDPR準拠、HDBセキュリティポリシー適用、プライバシーポリシー整備

実装内容:
・プライバシーポリシーの表示と同意取得
・データ収集の最小化
・ユーザー同意管理
・同意撤回機能（非機能要求書記載）

データライフサイクル管理:
収集 → 利用目的明示・同意取得
保存 → AES-256暗号化・アクセス制御
利用 → 目的外利用禁止
共有 → 明示的同意必須
削除 → ユーザー要求対応・自動削除

3.6.2 権限管理
要件: HealthKit・カメラ等の適切なタイミングでの権限要求、権限拒否時の代替機能

権限｜用途｜要求タイミング
HealthKit/Health Connect｜バイタルデータ連携｜初回データ連携時
カメラ｜QRコード読取｜QRスキャン機能使用時
通知｜リマインダー通知｜通知設定有効化時
バイブレーション｜操作フィードバック｜設定有効化時（音楽権限必要）

3.7 ログ・監視

3.7.1 セキュリティログ
要件: 重要操作・エラー・警告の適切なログ出力、個人情報・機微情報は出力禁止

SecurityLogger {
  log(event): {
    timestamp: タイムスタンプ
    eventType: イベント種別
    userId: ハッシュ化されたユーザーID
    action: アクション
    result: 結果
    // 個人情報は含めない
  }
}

3.7.2 クラッシュ監視
要件: Firebase Crashlytics導入、クラッシュレポート自動収集・分析、迅速な対応体制

CrashReporting {
  initialize(): {
    crashlytics.setCrashlyticsCollectionEnabled(本番環境のみ)
    crashlytics.setUserId(ハッシュ化ユーザーID)
    crashlytics.setAttributes({
      app_version: アプリバージョン
      environment: 環境
      device_type: プラットフォーム
    })
  }
}

3.8 脆弱性対策

3.8.1 OWASP Mobile Top 10対策
要件: OWASP Mobile Top 10準拠の定期診断実施、脆弱性発見時は優先度に応じて適切に速やかに対処

脆弱性｜対策実装｜実装層
M1: 不適切なプラットフォーム使用｜プラットフォームガイドライン準拠｜アプリケーション
M2: 安全でないデータストレージ｜AES-256暗号化、Keychain/Keystore｜フレームワーク
M3: 安全でない通信｜TLS 1.3、証明書ピンニング｜フレームワーク
M4: 安全でない認証｜多要素認証、生体認証｜アプリケーション
M5: 不十分な暗号化｜AES-256、PBKDF2（100,000回）｜システム
M6: 安全でない認可｜RBAC、最小権限｜アプリケーション
M7: クライアントコード品質｜TypeScript strict、ESLint｜アプリケーション
M8: コード改ざん｜署名検証、整合性チェック｜フレームワーク
M9: リバースエンジニアリング｜ProGuard/R8難読化｜フレームワーク
M10: 不要な機能｜デバッグコード削除｜アプリケーション

3.8.2 SQLインジェクション対策
パラメータ化クエリの徹底
SecureDatabase {
  // 安全な実装（必須）
  safeQuery(userId, dataType): 
    query = 'SELECT * FROM vital_data WHERE user_id = ? AND type = ?'
    return db.executeSql(query, [userId, dataType])
  
  // 入力値検証
  validateInput(input): 
    危険パターン = [';', '--', '/*', '*/', 'xp_', 'sp_']
    return 危険パターンが含まれていないことを確認
}

3.9 性能要件との両立

3.9.1 暗号化処理の最適化
要件: メモリ使用量200MB以下、CPU使用率50%以下を維持しつつセキュリティ確保

OptimizedEncryption {
  // バッチ暗号化で効率化
  encryptBatch(data): 並列処理で高速化
  
  // 暗号化キャッシュ
  encryptionCache: LRUCache(max: 100, ttl: 5分)
}

4. インシデント対応

4.1 インシデント対応体制
要件: アプリ障害発生から2時間以内復旧、緊急度に応じた対応優先度設定

検知 → 初動対応（2時間以内） → 影響分析 → 対策実施 → 再発防止

4.2 対応優先度
・Critical: データ漏洩、認証バイパス、DB破損 → 即時対応
・High: 権限昇格、DoS、暗号化失敗 → 24時間以内
・Medium: 情報漏洩リスク → 1週間以内
・Low: 軽微な脆弱性 → 次回リリース

5. 運用・保守

5.1 開発環境
要件: 開発・ステージング・本番環境の構築、React Native環境統一

環境別設定:
development: {
  apiUrl: 'https://dev-api.hdb.example.com'
  enableDebug: true
  certificatePinning: false
}
staging: {
  apiUrl: 'https://staging-api.hdb.example.com'
  enableDebug: false
  certificatePinning: true
}
production: {
  apiUrl: 'https://api.hdb.example.com'
  enableDebug: false
  certificatePinning: true
}

5.2 OSバージョンアップ対応
要件: 新OS版リリース後3ヶ月以内対応、最新OSから3世代サポート維持

・iOS16以降サポート
・Android10以降サポート
・新OS対応時のセキュリティ機能確認

6. セキュリティ実装チェックリスト

6.1 開発フェーズ
□ セキュアコーディングガイドライン準拠
□ TypeScript strict mode有効化
□ ESLintセキュリティルール適用
□ 入力値検証実装
□ SQLインジェクション対策
□ パラメータ化クエリ使用
□ エラーハンドリング実装
□ 機密情報のハードコーディング禁止

6.2 データベースセキュリティ
□ データベース暗号化実装
□ AES-256暗号化設定
□ Keychain/Keystore連携
□ フィールドレベル暗号化
□ 監査ログ実装
□ バックアップ暗号化
□ セキュアデリート設定
□ アクセス制御実装

6.3 テストフェーズ
□ 静的コード解析（SAST）
□ 動的セキュリティテスト（DAST）
□ SQLインジェクションテスト
□ 暗号化動作確認
□ 権限テスト
□ 依存関係脆弱性スキャン
□ ペネトレーションテスト
□ 実機テスト（iOS16+、Android10+）

6.4 リリースフェーズ
□ デバッグコード削除
□ ProGuard/R8設定確認
□ 証明書ピンニング設定
□ データベース暗号化確認
□ Firebase Crashlytics設定
□ プライバシーポリシー更新
□ App Store/Google Play規約準拠確認

6.5 運用フェーズ
□ セキュリティログ監視
□ Firebase Crashlytics監視
□ データベース監査ログ確認
□ バックアップ動作確認
□ インシデント対応訓練（四半期）
□ 脆弱性情報収集
□ セキュリティパッチ適用
□ OWASP診断実施（年次）

7. 今後の検討事項

7.1 追加セキュリティ機能
・リスクベース認証の導入
・行動分析による異常検知
・ゼロトラストアーキテクチャの採用
・エンドツーエンド暗号化の実装
・SQLCipher導入検討（より強固なDB暗号化）

7.2 コンプライアンス拡張
・ISO 27001認証取得
・プライバシーマーク取得
・医療情報ガイドライン準拠
・3省2ガイドライン準拠検討

8. 付録

8.1 用語集
・AES-256: Advanced Encryption Standard 256bit - 高強度暗号化方式
・PBKDF2: Password-Based Key Derivation Function 2 - パスワードベース鍵導出関数
・Keychain: iOS提供のセキュアなデータ保存領域
・Keystore: Android提供のセキュアな鍵管理システム
・TLS: Transport Layer Security - 通信暗号化プロトコル
・JWT: JSON Web Token - 認証トークン形式
・OWASP: Open Web Application Security Project
・GDPR: General Data Protection Regulation - EU個人情報保護規則
・TEE: Trusted Execution Environment - 信頼実行環境
・FBE: File-Based Encryption - ファイルベース暗号化
・GCM: Galois/Counter Mode - 認証付き暗号モード
・RBAC: Role-Based Access Control - ロールベースアクセス制御
・SSO: Single Sign-On - シングルサインオン
・JB: Jailbreak - iOS脱獄

8.2 参考資料
・OWASP Mobile Security Testing Guide
・iOS Security Guide (Apple)
・Android Security Best Practices (Google)
・個人情報保護委員会ガイドライン
・Firebase Crashlytics Documentation
・React Native Security Best Practices
・HDBセキュリティポリシー

---
文書バージョン: 1.0
最終更新日: 2025年1月
次回レビュー: 2025年4月