処理設計	オンライン処理設計書	システム名	HDBモバイルアプリケーション			業務ID／業務名	HDB-001／健康データ管理			ユースケースID／ユースケース名	UC-ALL／オンライン処理全般			作成者	HDBプロジェクトチーム	作成日	2025-08-01
							
							
	処理ID／処理名	PROC-ONLINE／オンライン処理方針						更新者		更新日	
							
							
							
概要							
本設計書は、HDBモバイルアプリケーションにおけるオンライン処理の仕組みとして、文字、性能、可用性、運用、セキュリティ、通信方式、データ保護、サービス監視、負荷分散、サービス継続、リカバリ、閉塞、予閉塞、標準、システム基盤制御ツール、運用作業支援ツールについて網羅的に整理し、検証可能にすることを目的とする。							
							
							
							
事前条件							
1. React Nativeによるクロスプラットフォーム開発							
2. iOS16以降、Android10以降のサポート							
3. HDBシステムおよびバイタルAWSとの連携							
4. SQLiteによるローカルデータベース実装							
5. 24時間365日稼働を前提とした設計							
							
画面入力項目							
項番	論理項目名	論理データ型	備考					
							
■文字							
1	文字コード	UTF-8	全システム統一					
2	改行コード	LF（\n）	iOS/Android共通					
3	最大文字数（ユーザーID）	50文字	半角英数字のみ					
4	最大文字数（パスワード）	20文字	8-20文字、英数字記号混在必須					
5	最大文字数（ニックネーム）	20文字	全角10文字相当					
6	最大文字数（テキスト入力）	1000文字	備考欄等					
7	禁止文字	制御文字（NULL、改行除く）	セキュリティ対策					
8	エスケープ処理	HTMLエンティティ、SQLインジェクション対策	<>&"'をエスケープ					
							
■性能							
9	アプリ起動時間目標	3秒以内（初回）、1秒以内（2回目以降）	90%ile					
10	画面遷移時間目標	0.5秒以内（WebView除く）	90%ile					
11	API応答時間目標	2秒以内	95%ile					
12	バッチ処理件数	100件/回	バイタルデータ一括送信					
13	同時接続数上限	1000接続/分	アプリ側の制限					
14	CPU使用率上限	50%以下	通常操作時					
15	メモリ使用量上限	200MB以下	アプリ単体					
16	通信量制限	50MB/日	データ圧縮により削減					
							
処理フロー							
							
■通信方式							
1. HTTPS通信							
   1.1 TLS 1.3以上を使用							
   1.2 証明書ピンニング実装（将来）							
   1.3 暗号スイート：TLS_AES_256_GCM_SHA384優先							
							
2. API通信仕様							
   2.1 RESTful API（JSON形式）							
   2.2 HTTPメソッド：GET/POST/PUT/DELETE							
   2.3 認証：Bearer Token（JWT）							
   2.4 タイムアウト：30秒							
   2.5 Keep-Alive：有効（60秒）							
							
3. データ圧縮							
   3.1 gzip圧縮（Content-Encoding: gzip）							
   3.2 画像：WebP形式（将来対応）							
   3.3 最小化：JSONキー名短縮							
							
■可用性							
4. 稼働率目標							
   4.1 アプリ稼働率：99.9%（年間）							
   4.2 計画停止：月1回2時間以内							
   4.3 MTBF（平均故障間隔）：720時間以上							
   4.4 MTTR（平均復旧時間）：2時間以内							
							
5. 冗長化							
   5.1 ローカルキャッシュによるオフライン対応							
   5.2 複数APIエンドポイント（将来）							
   5.3 自動フェイルオーバー機能							
							
■データ保護							
6. データ暗号化							
   6.1 通信路：TLS 1.3							
   6.2 保存データ：AES-256-GCM							
   6.3 認証情報：iOS Keychain/Android Keystore							
   6.4 バックアップ：暗号化ZIP形式							
							
7. データ完全性							
   7.1 チェックサム検証（SHA-256）							
   7.2 トランザクション管理							
   7.3 ロールバック機能							
   7.4 監査ログ							
							
■サービス監視							
8. 監視項目							
   8.1 死活監視：1分間隔のヘルスチェック							
   8.2 性能監視：応答時間、エラー率							
   8.3 リソース監視：CPU、メモリ、通信量							
   8.4 セキュリティ監視：不正アクセス検知							
							
9. アラート							
   9.1 エラー率5%超過時							
   9.2 応答時間3秒超過時							
   9.3 連続エラー3回以上							
   9.4 Firebase Crashlyticsへの自動送信							
							
■負荷分散							
10. クライアント側負荷分散							
    10.1 API呼び出しの間隔制御（最小100ms）							
    10.2 バッチ処理による集約							
    10.3 優先度付きキュー管理							
    10.4 バックグラウンド処理の活用							
							
凡例							
MTBF: Mean Time Between Failures（平均故障間隔）							
MTTR: Mean Time To Recovery（平均復旧時間）							
RPO: Recovery Point Objective（目標復旧時点）							
RTO: Recovery Time Objective（目標復旧時間）							
							
							
入力値チェック							
							
■標準							
1. コーディング標準							
   - ESLint設定準拠							
   - TypeScript strict mode							
   - Prettier自動フォーマット							
							
2. API仕様標準							
   - OpenAPI 3.0準拠							
   - JSONスキーマによる検証							
   - エラーコード体系（4桁数字）							
							
3. ログ標準							
   - ログレベル：ERROR/WARN/INFO/DEBUG							
   - フォーマット：ISO8601時刻 [レベル] カテゴリ - メッセージ							
   - ローテーション：1年間保持							
							
処理ロジック	出力先						
							
■サービス継続							
1. 障害時の継続性							
   - オフラインモードへの自動切替	→ アプリ内状態管理						
   - ローカルデータによる基本機能提供	→ SQLite						
   - 復旧時の自動再同期	→ SyncService						
							
2. 災害対策							
   - データバックアップ（日次）	→ クラウドストレージ						
   - 地理的分散（将来検討）	→ 複数リージョン						
   - BCP発動基準の明確化	→ 運用マニュアル						
							
■リカバリ							
3. データリカバリ							
   - ローカルDBの自動バックアップ（日次）	→ デバイス内ストレージ						
   - クラウドバックアップ（手動）	→ iCloud/Google Drive						
   - ポイントインタイムリカバリ	→ 過去7日分						
							
4. アプリケーションリカバリ							
   - クラッシュ後の自動復旧	→ 前回の状態から再開						
   - 設定情報の復元	→ AsyncStorage						
   - 認証状態の復元	→ Keychain/Keystore						
							
■閉塞・予閉塞							
5. サービス閉塞							
   - 緊急メンテナンス通知	→ プッシュ通知						
   - 機能制限モード	→ 読み取り専用						
   - 完全閉塞時メッセージ	→ アプリ内表示						
							
6. 予閉塞							
   - 計画メンテナンス通知（3日前）	→ アプリ内お知らせ						
   - カウントダウン表示（1時間前）	→ ヘッダー表示						
   - 自動ログアウト（5分前）	→ 強制ログアウト						
							
エラー処理	出力先						
							
■運用							
1. 運用手順							
   - 日次：ログ確認、エラー集計	→ 運用レポート						
   - 週次：パフォーマンス分析	→ 改善提案書						
   - 月次：セキュリティ監査	→ 監査報告書						
							
2. インシデント対応							
   - レベル1（軽微）：翌営業日対応	→ チケット管理						
   - レベル2（中度）：4時間以内対応	→ エスカレーション						
   - レベル3（重大）：1時間以内対応	→ 緊急連絡網						
							
■システム基盤制御ツール							
3. 開発・テストツール							
   - React Native Debugger	→ デバッグ情報						
   - Flipper	→ ネットワーク監視						
   - Reactotron	→ 状態管理監視						
							
4. ビルド・デプロイツール							
   - Fastlane	→ 自動ビルド						
   - CodePush（将来）	→ ホットアップデート						
   - Firebase App Distribution	→ テスト配布						
							
■運用作業支援ツール							
5. 監視ツール							
   - Firebase Crashlytics	→ クラッシュレポート						
   - Firebase Performance	→ パフォーマンス分析						
   - Google Analytics	→ 利用状況分析						
							
6. 運用管理ツール							
   - Remote Config	→ 設定変更						
   - Feature Flag	→ 機能ON/OFF						
   - A/Bテスト基盤	→ 改善効果測定						
							
画面出力項目							
出力画面ID／名	運用ステータス表示						
項番	論理項目名	論理データ型	備考					
1	サービス状態	文字列	「正常」「制限中」「メンテナンス中」					
2	最終同期時刻	日時	yyyy/MM/dd HH:mm:ss					
3	エラー件数	数値	過去1時間のエラー数					
4	通信量	数値	本日の使用量（MB）					
5	キャッシュ使用量	数値	ローカルストレージ使用量（MB）					
							
出力画面ID／名	デバッグ情報画面（開発版のみ）						
項番	論理項目名	論理データ型	備考					
1	API接続先	文字列	現在の接続先URL					
2	認証トークン有効期限	日時	JWTの有効期限					
3	ログレベル	文字列	現在のログ出力レベル					
4	デバイスID	文字列	一意のデバイス識別子					
5	アプリバージョン	文字列	ビルド番号含む					
							
備考							
1. 本設計書は検証可能性を重視し、各項目に具体的な数値目標と測定方法を定義している							
2. 性能目標は「スマホアプリ単体_非機能要求.tsv」の要件に基づく							
3. セキュリティ要件はOWASP Mobile Top 10に準拠							
4. 運用ツールは段階的に導入し、初期リリースでは最小構成とする							
5. 各項目の検証方法は別途「オンライン処理検証仕様書」に定義する