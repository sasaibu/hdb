import React, {useState} from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
} from 'react-native';
import {StackScreenProps} from '@react-navigation/stack';
import {RootStackParamList} from '../navigation/types';

type Props = StackScreenProps<RootStackParamList, 'PulseSurvey'>;

interface Question {
  id: string;
  text: string;
  category: string;
}

interface Answer {
  questionId: string;
  value: number; // 1: Â§ßÈõ®, 2: Èõ®, 3: Êõá„Çä, 4: Êô¥„Çå
}

const PulseSurveyScreen: React.FC<Props> = ({navigation}) => {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<Answer[]>([]);
  const [selectedValue, setSelectedValue] = useState<number | null>(null);

  // Ë≥™Âïè„Éá„Éº„Çø
  const questions: Question[] = [
    {id: 'q1', text: '‰ªä„ÅÆ‰ªï‰∫ã„Å´„ÇÑ„Çä„Åå„ÅÑ„ÇíÊÑü„Åò„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü', category: '‰ªï‰∫ã„ÅÆÊ∫ÄË∂≥Â∫¶'},
    {id: 'q2', text: 'ËÅ∑Â†¥„ÅÆ‰∫∫ÈñìÈñ¢‰øÇ„ÅØËâØÂ•Ω„Åß„Åô„ÅãÔºü', category: 'ËÅ∑Â†¥Áí∞Â¢É'},
    {id: 'q3', text: '‰ªï‰∫ã„Å®„Éó„É©„Ç§„Éô„Éº„Éà„ÅÆ„Éê„É©„É≥„Çπ„ÅØÂèñ„Çå„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü', category: '„ÉØ„Éº„ÇØ„É©„Ç§„Éï„Éê„É©„É≥„Çπ'},
    {id: 'q4', text: '‰∏äÂè∏„Åã„Çâ„ÅÆ„Çµ„Éù„Éº„Éà„ÅØÂçÅÂàÜ„Åß„Åô„ÅãÔºü', category: '‰∏äÂè∏„Å®„ÅÆÈñ¢‰øÇ'},
    {id: 'q5', text: '‰ªä„ÅÆ‰ªï‰∫ã„ÅßÊàêÈï∑„ÇíÂÆüÊÑü„Åß„Åç„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü', category: 'ÊàêÈï∑ÂÆüÊÑü'},
    {id: 'q6', text: '‰ºöÁ§æ„ÅÆÊñπÈáù„ÇÑÁõÆÊ®ô„Å´ÂÖ±ÊÑü„Åß„Åç„Åæ„Åô„ÅãÔºü', category: 'ÁµÑÁπî„Å∏„ÅÆÂÖ±ÊÑü'},
    {id: 'q7', text: 'ÈÅ©Âàá„Å™Ë©ï‰æ°„ÇíÂèó„Åë„Å¶„ÅÑ„Çã„Å®ÊÑü„Åò„Åæ„Åô„ÅãÔºü', category: 'Ë©ï‰æ°„ÉªÊâøË™ç'},
    {id: 'q8', text: '‰ªä„ÅÆËÅ∑Â†¥„ÅßÈï∑„ÅèÂÉç„Åç„Åü„ÅÑ„Å®ÊÄù„ÅÑ„Åæ„Åô„ÅãÔºü', category: 'Á∂ôÁ∂öÊÑèÂêë'},
  ];

  const weatherOptions = [
    {value: 4, icon: '‚òÄÔ∏è', label: '„Åù„ÅÜ„Å†', color: '#FFD700'},
    {value: 3, icon: '‚òÅÔ∏è', label: '„Åæ„ÅÇ„Åù„ÅÜ„Å†', color: '#A0A0A0'},
    {value: 2, icon: 'üåßÔ∏è', label: '„ÇÑ„ÇÑÈÅï„ÅÜ', color: '#4682B4'},
    {value: 1, icon: '‚õàÔ∏è', label: 'ÈÅï„ÅÜ', color: '#2C3E50'},
  ];

  const handleSelectAnswer = (value: number) => {
    setSelectedValue(value);
  };

  const handleNext = () => {
    if (selectedValue === null) {
      Alert.alert('ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'ÂõûÁ≠î„ÇíÈÅ∏Êäû„Åó„Å¶„Åã„ÇâÊ¨°„Å∏ÈÄ≤„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ');
      return;
    }

    // ÂõûÁ≠î„Çí‰øùÂ≠ò
    const newAnswer: Answer = {
      questionId: questions[currentQuestionIndex].id,
      value: selectedValue,
    };
    setAnswers([...answers.filter(a => a.questionId !== newAnswer.questionId), newAnswer]);

    // Ê¨°„ÅÆË≥™Âïè„Å∏
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setSelectedValue(null);
    }
  };

  const handleComplete = () => {
    if (selectedValue === null) {
      Alert.alert('ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'ÂõûÁ≠î„ÇíÈÅ∏Êäû„Åó„Å¶„Åã„ÇâÂÆå‰∫Ü„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      return;
    }

    // ÊúÄÂæå„ÅÆÂõûÁ≠î„Çí‰øùÂ≠ò
    const newAnswer: Answer = {
      questionId: questions[currentQuestionIndex].id,
      value: selectedValue,
    };
    const finalAnswers = [...answers.filter(a => a.questionId !== newAnswer.questionId), newAnswer];

    // ÂàÜÊûêÁµêÊûúÁîªÈù¢„Å∏ÈÅ∑Áßª
    navigation.navigate('PulseSurveyResult', {
      surveyId: `survey-${Date.now()}`,
      answers: finalAnswers,
      questions: questions,
      completedAt: new Date().toISOString(),
    });
  };

  const currentQuestion = questions[currentQuestionIndex];
  const isLastQuestion = currentQuestionIndex === questions.length - 1;

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>„Éë„É´„Çπ„Çµ„Éº„Éô„Ç§</Text>
      </View>

      <View style={styles.progressContainer}>
        <View style={styles.progressBar}>
          <View 
            style={[
              styles.progressFill, 
              {width: `${((currentQuestionIndex + 1) / questions.length) * 100}%`}
            ]} 
          />
        </View>
        <Text style={styles.progressText}>
          {currentQuestionIndex + 1} / {questions.length}
        </Text>
      </View>

      <ScrollView style={styles.content}>
        <View style={styles.questionContainer}>
          <Text style={styles.category}>{currentQuestion.category}</Text>
          <Text style={styles.questionText}>{currentQuestion.text}</Text>

          <View style={styles.optionsContainer}>
            {weatherOptions.map((option) => (
              <TouchableOpacity
                key={option.value}
                style={[
                  styles.optionButton,
                  selectedValue === option.value && styles.selectedOption,
                  selectedValue === option.value && {borderColor: option.color},
                ]}
                onPress={() => handleSelectAnswer(option.value)}
                activeOpacity={0.8}>
                <Text style={styles.optionIcon}>{option.icon}</Text>
                <Text style={[
                  styles.optionLabel,
                  selectedValue === option.value && {color: option.color}
                ]}>
                  {option.label}
                </Text>
              </TouchableOpacity>
            ))}
          </View>
        </View>
      </ScrollView>

      <View style={styles.footer}>
        <TouchableOpacity
          style={[
            styles.nextButton,
            selectedValue === null && styles.disabledButton,
          ]}
          onPress={isLastQuestion ? handleComplete : handleNext}
          disabled={selectedValue === null}
          activeOpacity={0.8}>
          <Text style={styles.nextButtonText}>
            {isLastQuestion ? 'ÂÆå‰∫Ü' : 'Ê¨°„Å∏'}
          </Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  header: {
    backgroundColor: '#FFFFFF',
    paddingVertical: 16,
    paddingHorizontal: 20,
    shadowColor: '#000',
    shadowOffset: {width: 0, height: 2},
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#333333',
    textAlign: 'center',
  },
  progressContainer: {
    backgroundColor: '#FFFFFF',
    paddingHorizontal: 20,
    paddingTop: 16,
    paddingBottom: 12,
  },
  progressBar: {
    height: 8,
    backgroundColor: '#E0E0E0',
    borderRadius: 4,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#007AFF',
    borderRadius: 4,
  },
  progressText: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    marginTop: 8,
  },
  content: {
    flex: 1,
  },
  questionContainer: {
    backgroundColor: '#FFFFFF',
    margin: 16,
    padding: 24,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: {width: 0, height: 2},
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  category: {
    fontSize: 14,
    color: '#007AFF',
    fontWeight: '500',
    marginBottom: 12,
  },
  questionText: {
    fontSize: 18,
    color: '#333333',
    fontWeight: '500',
    lineHeight: 26,
    marginBottom: 32,
  },
  optionsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
  },
  optionButton: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 20,
    paddingHorizontal: 8,
    backgroundColor: '#F8F8F8',
    borderRadius: 12,
    borderWidth: 2,
    borderColor: 'transparent',
  },
  selectedOption: {
    backgroundColor: '#FFFFFF',
    shadowColor: '#000',
    shadowOffset: {width: 0, height: 2},
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  optionIcon: {
    fontSize: 40,
    marginBottom: 8,
  },
  optionLabel: {
    fontSize: 14,
    color: '#666666',
    fontWeight: '500',
  },
  footer: {
    backgroundColor: '#FFFFFF',
    paddingHorizontal: 20,
    paddingVertical: 16,
    shadowColor: '#000',
    shadowOffset: {width: 0, height: -2},
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 5,
  },
  nextButton: {
    backgroundColor: '#007AFF',
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  disabledButton: {
    backgroundColor: '#B0B0B0',
  },
  nextButtonText: {
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: '600',
  },
});

export default PulseSurveyScreen;