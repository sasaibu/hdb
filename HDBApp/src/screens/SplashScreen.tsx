import React, {useEffect, useState, useRef} from 'react';
import {
  View,
  Text,
  StyleSheet,
  ActivityIndicator,
  Animated,
  Dimensions,
  StatusBar,
} from 'react-native';
import {StackNavigationProp} from '@react-navigation/stack';
import {RootStackParamList} from '../navigation/AppNavigator';
import {mockApi} from '../services/api/mockApi';
import {deviceInfoService} from '../services/DeviceInfoService';
import theme from '../styles/theme';

const {width, height} = Dimensions.get('window');

type SplashScreenNavigationProp = StackNavigationProp<
  RootStackParamList,
  'Splash'
>;

interface Props {
  navigation: SplashScreenNavigationProp;
}

export default function SplashScreen({navigation}: Props) {
  const [isInitializing, setIsInitializing] = useState(true);
  const [statusMessage, setStatusMessage] = useState('ÂàùÊúüÂåñ‰∏≠...');
  
  // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Áî®„ÅÆÂÄ§
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const scaleAnim = useRef(new Animated.Value(0.8)).current;
  const slideAnim = useRef(new Animated.Value(50)).current;
  const progressAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    // ÂÖ•Â†¥„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 1000,
        useNativeDriver: true,
      }),
      Animated.spring(scaleAnim, {
        toValue: 1,
        tension: 50,
        friction: 7,
        useNativeDriver: true,
      }),
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 800,
        useNativeDriver: true,
      }),
    ]).start();

    // „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
    Animated.loop(
      Animated.sequence([
        Animated.timing(progressAnim, {
          toValue: 1,
          duration: 2000,
          useNativeDriver: false,
        }),
        Animated.timing(progressAnim, {
          toValue: 0,
          duration: 0,
          useNativeDriver: false,
        }),
      ])
    ).start();

    const initializeApp = async () => {
      try {
        setStatusMessage('üöÄ „Ç¢„Éó„É™„ÇíÂàùÊúüÂåñ„Åó„Å¶„ÅÑ„Åæ„Åô...');
        
        // 1. „Éá„Éê„Ç§„ÇπÊÉÖÂ†±ÂèéÈõÜÔºàÊñ∞ERÂõ≥ÂØæÂøúÔºâ
        setStatusMessage('üì± „Éá„Éê„Ç§„ÇπÊÉÖÂ†±„ÇíÂèéÈõÜ„Åó„Å¶„ÅÑ„Åæ„Åô...');
        const deviceInfo = await deviceInfoService.collectDeviceInfo();
        
        // 2. 1Êó•1ÂõûÂÆüË°åÂà∂Âæ°„ÉÅ„Çß„ÉÉ„ÇØ
        const canExecute = await deviceInfoService.canExecuteToday();
        if (canExecute) {
          // „Éá„Éê„Ç§„ÇπÊÉÖÂ†±ÁôªÈå≤Ôºà1Êó•1ÂõûÔºâ
          setStatusMessage('üîê „Éá„Éê„Ç§„ÇπÊÉÖÂ†±„ÇíÁôªÈå≤„Åó„Å¶„ÅÑ„Åæ„Åô...');
          const registerResponse = await mockApi.registerDevice(deviceInfo);
          
          if (registerResponse.success) {
            console.log('Device registered successfully:', registerResponse.data?.deviceId);
            // ÂÆüË°å„Ç´„Ç¶„É≥„Çø„ÉºÊõ¥Êñ∞
            await deviceInfoService.incrementExecutionCount();
          } else {
            console.warn('Device registration failed:', registerResponse.error);
          }
        } else {
          console.log('Device registration skipped - already executed today');
        }
        
        // 3. „Éá„Éê„Ç§„Çπ„Éà„Éº„ÇØ„É≥ÊúüÈôê„ÉÅ„Çß„ÉÉ„ÇØÔºà270Êó•Ôºâ
        const isTokenExpired = await deviceInfoService.isTokenExpired();
        if (isTokenExpired) {
          console.warn('Device token expired - requesting new token');
          setStatusMessage('üîî „Éó„ÉÉ„Ç∑„É•ÈÄöÁü•Ë®≠ÂÆö„ÇíÊõ¥Êñ∞„Åó„Å¶„ÅÑ„Åæ„Åô...');
          // ÂÆüÈöõ„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß„ÅØÊñ∞„Åó„ÅÑ„Éà„Éº„ÇØ„É≥„ÇíÂèñÂæó„ÉªÊõ¥Êñ∞
        }
        
        // 4. ÂàùÊúü„Éá„Éº„ÇøÂèñÂæó
        setStatusMessage('‚öôÔ∏è Ë®≠ÂÆö„ÇíË™≠„ÅøËæº„Çì„Åß„ÅÑ„Åæ„Åô...');
        const initialDataResponse = await mockApi.getInitialData();
        
        if (!initialDataResponse.success) {
          console.warn('Initial data fetch failed:', initialDataResponse.error);
        }
        
        // 5. Ë™çË®ºÁä∂ÊÖãÁ¢∫Ë™ç
        setStatusMessage('üîç Ë™çË®ºÁä∂ÊÖã„ÇíÁ¢∫Ë™ç„Åó„Å¶„ÅÑ„Åæ„Åô...');
        const authResponse = await mockApi.verifyToken();
        
        if (authResponse.success && authResponse.data?.isValid) {
          // Ë™çË®ºÊ∏à„Åø ‚Üí „É°„Ç§„É≥ÁîªÈù¢„Å∏
          console.log('User authenticated, navigating to Main');
          setStatusMessage('‚úÖ „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Åß„Åô');
          
          // ÈÄÄÂ†¥„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
          Animated.parallel([
            Animated.timing(fadeAnim, {
              toValue: 0,
              duration: 500,
              useNativeDriver: true,
            }),
            Animated.timing(scaleAnim, {
              toValue: 1.1,
              duration: 500,
              useNativeDriver: true,
            }),
          ]).start(() => {
            navigation.replace('Main');
          });
        } else {
          // Êú™Ë™çË®º ‚Üí „É≠„Ç∞„Ç§„É≥ÁîªÈù¢„Å∏
          console.log('User not authenticated, navigating to Login');
          setStatusMessage('üîë „É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô');
          
          // ÈÄÄÂ†¥„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
          Animated.parallel([
            Animated.timing(fadeAnim, {
              toValue: 0,
              duration: 500,
              useNativeDriver: true,
            }),
            Animated.timing(scaleAnim, {
              toValue: 1.1,
              duration: 500,
              useNativeDriver: true,
            }),
          ]).start(() => {
            navigation.replace('Login');
          });
        }
        
      } catch (error) {
        console.error('App initialization failed:', error);
        setStatusMessage('‚ùå ÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        
        // „Ç®„É©„ÉºÊôÇ„ÅØ„É≠„Ç∞„Ç§„É≥ÁîªÈù¢„Å∏„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
        setTimeout(() => {
          Animated.parallel([
            Animated.timing(fadeAnim, {
              toValue: 0,
              duration: 500,
              useNativeDriver: true,
            }),
          ]).start(() => {
            navigation.replace('Login');
          });
        }, 1000);
      } finally {
        setIsInitializing(false);
      }
    };

    // ÊúÄ‰Ωé2Áßí„ÅØË°®Á§∫„Åó„Å¶„Åã„ÇâAPIÂá¶ÁêÜÈñãÂßã
    const timer = setTimeout(() => {
      initializeApp();
    }, 2000);

    return () => clearTimeout(timer);
  }, [navigation, fadeAnim, scaleAnim, slideAnim, progressAnim]);

  const progressWidth = progressAnim.interpolate({
    inputRange: [0, 1],
    outputRange: ['0%', '100%'],
  });

  return (
    <>
      <StatusBar barStyle="light-content" backgroundColor={theme.colors.primary[600]} />
      <View style={styles.container}>
        {/* ËÉåÊôØ„Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥ÂäπÊûú */}
        <View style={styles.backgroundGradient} />
        
        {/* Ë£ÖÈ£æÁöÑ„Å™ÂÜÜ */}
        <View style={[styles.decorativeCircle, styles.circle1]} />
        <View style={[styles.decorativeCircle, styles.circle2]} />
        <View style={[styles.decorativeCircle, styles.circle3]} />
        
        <Animated.View 
          style={[
            styles.content,
            {
              opacity: fadeAnim,
              transform: [
                { scale: scaleAnim },
                { translateY: slideAnim }
              ]
            }
          ]}
        >
          {/* „É≠„Ç¥„Çª„ÇØ„Ç∑„Éß„É≥ */}
          <View style={styles.logoContainer}>
            <View style={styles.logoIcon}>
              <Text style={styles.logoEmoji}>üíä</Text>
            </View>
            <Text style={styles.title}>HDB</Text>
            <Text style={styles.subtitle}>Health Data Bank</Text>
            <Text style={styles.tagline}>„ÅÇ„Å™„Åü„ÅÆÂÅ•Â∫∑„Çí„ÄÅ„Éá„Éº„Çø„ÅßÊîØ„Åà„Çã</Text>
          </View>

          {/* „É≠„Éº„Éá„Ç£„É≥„Ç∞„Çª„ÇØ„Ç∑„Éß„É≥ */}
          <View style={styles.loadingContainer}>
            {/* „Ç´„Çπ„Çø„É†„Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº */}
            <View style={styles.progressBarContainer}>
              <Animated.View 
                style={[
                  styles.progressBar,
                  { width: progressWidth }
                ]} 
              />
            </View>
            
            {/* „É≠„Éº„Éá„Ç£„É≥„Ç∞„Éâ„ÉÉ„Éà */}
            <View style={styles.loadingDots}>
              <ActivityIndicator
                size="small"
                color={theme.colors.primary[300]}
                style={styles.loader}
              />
            </View>
            
            <Animated.Text 
              style={[
                styles.status,
                {
                  opacity: fadeAnim,
                  transform: [{ translateY: slideAnim }]
                }
              ]}
            >
              {statusMessage}
            </Animated.Text>
          </View>
        </Animated.View>

        {/* „Éï„ÉÉ„Çø„Éº */}
        <Animated.View 
          style={[
            styles.footer,
            { opacity: fadeAnim }
          ]}
        >
          <Text style={styles.footerText}>Powered by HDB Team</Text>
          <Text style={styles.version}>v1.0.0</Text>
        </Animated.View>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.primary[600],
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
  },
  backgroundGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: theme.colors.primary[500],
    opacity: 0.8,
  },
  decorativeCircle: {
    position: 'absolute',
    borderRadius: 9999,
    backgroundColor: theme.colors.primary[400],
    opacity: 0.1,
  },
  circle1: {
    width: 200,
    height: 200,
    top: -100,
    right: -100,
  },
  circle2: {
    width: 150,
    height: 150,
    bottom: -75,
    left: -75,
  },
  circle3: {
    width: 100,
    height: 100,
    top: height * 0.3,
    left: -50,
  },
  content: {
    alignItems: 'center',
    paddingHorizontal: 40,
  },
  logoContainer: {
    alignItems: 'center',
    marginBottom: 60,
  },
  logoIcon: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: theme.colors.background.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
    ...theme.shadow.lg,
  },
  logoEmoji: {
    fontSize: 40,
  },
  title: {
    fontSize: 48,
    fontWeight: 'bold',
    color: theme.colors.text.inverse,
    marginBottom: 8,
    letterSpacing: 2,
  },
  subtitle: {
    fontSize: 18,
    color: theme.colors.primary[100],
    marginBottom: 12,
    fontWeight: '500',
  },
  tagline: {
    fontSize: 14,
    color: theme.colors.primary[200],
    textAlign: 'center',
    fontStyle: 'italic',
  },
  loadingContainer: {
    alignItems: 'center',
    width: '100%',
  },
  progressBarContainer: {
    width: 200,
    height: 4,
    backgroundColor: theme.colors.primary[400],
    borderRadius: 2,
    overflow: 'hidden',
    marginBottom: 20,
  },
  progressBar: {
    height: '100%',
    backgroundColor: theme.colors.accent[400],
    borderRadius: 2,
  },
  loadingDots: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
  },
  loader: {
    marginHorizontal: 5,
  },
  status: {
    fontSize: 16,
    color: theme.colors.primary[100],
    textAlign: 'center',
    fontWeight: '500',
    paddingHorizontal: 20,
  },
  footer: {
    position: 'absolute',
    bottom: 50,
    alignItems: 'center',
  },
  footerText: {
    fontSize: 12,
    color: theme.colors.primary[200],
    marginBottom: 4,
  },
  version: {
    fontSize: 10,
    color: theme.colors.primary[300],
  },
});
